const axios = require("axios");
const nodemailer = require("nodemailer");
require("dotenv").config();

// ÈÖçÁΩÆ‰ø°ÊÅØ
const config = {
  smtp: {
    host: process.env.SMTP_HOST || "smtp.gmail.com",
    port: parseInt(process.env.SMTP_PORT) || 587,
    secure: false,
    auth: {
      user: process.env.SMTP_USER,
      pass: process.env.SMTP_PASS,
    },
  },
  weather: {
    provider: process.env.WEATHER_PROVIDER || "amap", // 'amap' Êàñ 'openweather'
    amapApiKey: process.env.AMAP_API_KEY,
    openWeatherApiKey: process.env.OPENWEATHER_API_KEY,
    city: process.env.CITY || "Beijing",
    cityCode: process.env.CITY_CODE || "110000", // È´òÂæ∑Âú∞ÂõæÂüéÂ∏ÇÁºñÁ†Å
  },
  emails: process.env.RECIPIENT_EMAILS || "",
};

// ÂüéÂ∏ÇÁºñÁ†ÅÊò†Â∞ÑË°®ÔºàÂ∏∏Áî®ÂüéÂ∏ÇÔºâ
const cityCodeMap = {
  // Áõ¥ËæñÂ∏Ç
  Âåó‰∫¨: "110000",
  Beijing: "110000",
  ‰∏äÊµ∑: "310000",
  Shanghai: "310000",
  Â§©Ê¥•: "120000",
  Tianjin: "120000",
  ÈáçÂ∫Ü: "500000",
  Chongqing: "500000",

  // ÁúÅ‰ºöÂüéÂ∏Ç
  ÂπøÂ∑û: "440100",
  Guangzhou: "440100",
  Ê∑±Âú≥: "440300",
  Shenzhen: "440300",
  Êù≠Â∑û: "330100",
  Hangzhou: "330100",
  Âçó‰∫¨: "320100",
  Nanjing: "320100",
  Ê≠¶Ê±â: "420100",
  Wuhan: "420100",
  ÊàêÈÉΩ: "510100",
  Chengdu: "510100",
  Ë•øÂÆâ: "610100",
  "Xi'an": "610100",
  ÈÉëÂ∑û: "410100",
  Zhengzhou: "410100",
  ÊµéÂçó: "370100",
  Jinan: "370100",
  Ê≤àÈò≥: "210100",
  Shenyang: "210100",
  ÈïøÊò•: "220100",
  Changchun: "220100",
  ÂìàÂ∞îÊª®: "230100",
  Harbin: "230100",
  Áü≥ÂÆ∂Â∫Ñ: "130100",
  Shijiazhuang: "130100",
  Â§™Âéü: "140100",
  Taiyuan: "140100",
  ÂëºÂíåÊµ©Áâπ: "150100",
  Hohhot: "150100",
  ÂçóÂÆÅ: "450100",
  Nanning: "450100",
  ÊòÜÊòé: "530100",
  Kunming: "530100",
  Ë¥µÈò≥: "520100",
  Guiyang: "520100",
  ÊãâËê®: "540100",
  Lhasa: "540100",
  ÂÖ∞Â∑û: "620100",
  Lanzhou: "620100",
  Ë•øÂÆÅ: "630100",
  Xining: "630100",
  Èì∂Â∑ù: "640100",
  Yinchuan: "640100",
  ‰πåÈ≤ÅÊú®ÈΩê: "650100",
  Urumqi: "650100",
  Êµ∑Âè£: "460100",
  Haikou: "460100",
  Á¶èÂ∑û: "350100",
  Fuzhou: "350100",
  ÈïøÊ≤ô: "430100",
  Changsha: "430100",
  ÂçóÊòå: "360100",
  Nanchang: "360100",
  ÂêàËÇ•: "340100",
  Hefei: "340100",
};

// Ëé∑ÂèñÂüéÂ∏ÇÁºñÁ†Å
function getCityCode(cityName) {
  // Â¶ÇÊûúÁõ¥Êé•Êèê‰æõ‰∫ÜÂüéÂ∏ÇÁºñÁ†Å
  if (/^\d{6}$/.test(cityName)) {
    return cityName;
  }

  // ‰ªéÊò†Â∞ÑË°®‰∏≠Êü•Êâæ
  const code = cityCodeMap[cityName];
  if (code) {
    return code;
  }

  // ÈªòËÆ§ËøîÂõûÂåó‰∫¨ÁºñÁ†Å
  console.warn(`Êú™ÊâæÂà∞ÂüéÂ∏Ç "${cityName}" ÁöÑÁºñÁ†ÅÔºå‰ΩøÁî®ÈªòËÆ§ÂüéÂ∏ÇÂåó‰∫¨`);
  return "110000";
}

// ‰ΩøÁî®È´òÂæ∑Âú∞ÂõæAPIËé∑ÂèñÂ§©Ê∞î‰ø°ÊÅØ
async function getAmapWeatherData(cityCode) {
  try {
    const url = `https://restapi.amap.com/v3/weather/weatherInfo?key=${config.weather.amapApiKey}&city=${cityCode}&extensions=all`;
    const response = await axios.get(url);
    const data = response.data;

    if (data.status !== "1") {
      throw new Error(`È´òÂæ∑Âú∞ÂõæAPIÈîôËØØ: ${data.info}`);
    }

    const live = data.lives[0];
    const forecast = data.forecasts && data.forecasts[0];

    return {
      provider: "amap",
      city: live.city,
      province: live.province,
      adcode: live.adcode,
      temperature: parseInt(live.temperature),
      temperatureFloat: parseFloat(live.temperature_float),
      humidity: parseInt(live.humidity),
      humidityFloat: parseFloat(live.humidity_float),
      weather: live.weather,
      windDirection: live.winddirection,
      windPower: live.windpower,
      reportTime: live.reporttime,
      forecast: forecast ? forecast.casts : null,
    };
  } catch (error) {
    console.error("Ëé∑ÂèñÈ´òÂæ∑Âú∞ÂõæÂ§©Ê∞îÊï∞ÊçÆÂ§±Ë¥•:", error.message);
    throw error;
  }
}

// ‰ΩøÁî®OpenWeatherMap APIËé∑ÂèñÂ§©Ê∞î‰ø°ÊÅØ
async function getOpenWeatherData(city) {
  try {
    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${config.weather.openWeatherApiKey}&units=metric&lang=zh_cn`;
    const response = await axios.get(url);
    const data = response.data;

    return {
      provider: "openweather",
      city: data.name,
      country: data.sys.country,
      temperature: Math.round(data.main.temp),
      feelsLike: Math.round(data.main.feels_like),
      humidity: data.main.humidity,
      pressure: data.main.pressure,
      description: data.weather[0].description,
      windSpeed: data.wind.speed,
      windDirection: data.wind.deg,
      visibility: data.visibility / 1000,
      sunrise: new Date(data.sys.sunrise * 1000).toLocaleTimeString("zh-CN"),
      sunset: new Date(data.sys.sunset * 1000).toLocaleTimeString("zh-CN"),
    };
  } catch (error) {
    console.error("Ëé∑ÂèñOpenWeatherMapÂ§©Ê∞îÊï∞ÊçÆÂ§±Ë¥•:", error.message);
    throw error;
  }
}

// Áªü‰∏ÄÁöÑÂ§©Ê∞îÊï∞ÊçÆËé∑ÂèñÊé•Âè£
async function getWeatherData(city) {
  if (config.weather.provider === "amap") {
    if (!config.weather.amapApiKey) {
      throw new Error("ËØ∑ËÆæÁΩÆ AMAP_API_KEY ÁéØÂ¢ÉÂèòÈáè");
    }
    const cityCode = getCityCode(city);
    return await getAmapWeatherData(cityCode);
  } else if (config.weather.provider === "openweather") {
    if (!config.weather.openWeatherApiKey) {
      throw new Error("ËØ∑ËÆæÁΩÆ OPENWEATHER_API_KEY ÁéØÂ¢ÉÂèòÈáè");
    }
    return await getOpenWeatherData(city);
  } else {
    throw new Error(
      '‰∏çÊîØÊåÅÁöÑÂ§©Ê∞îÊï∞ÊçÆÊèê‰æõÂïÜÔºåËØ∑ËÆæÁΩÆ WEATHER_PROVIDER ‰∏∫ "amap" Êàñ "openweather"'
    );
  }
}

// ÁîüÊàêÈ´òÂæ∑Âú∞ÂõæÂ§©Ê∞îÈÇÆ‰ª∂HTMLÂÜÖÂÆπ
function generateAmapWeatherEmailHTML(weatherData) {
  const currentDate = new Date().toLocaleDateString("zh-CN", {
    year: "numeric",
    month: "long",
    day: "numeric",
    weekday: "long",
  });

  // ÁîüÊàêÊú™Êù•Âá†Â§©ÁöÑÂ§©Ê∞îÈ¢ÑÊä•HTML
  let forecastHTML = "";
  if (weatherData.forecast && weatherData.forecast.length > 0) {
    forecastHTML = `
      <div class="forecast-section">
        <h2>üìÖ Êú™Êù•Â§©Ê∞îÈ¢ÑÊä•</h2>
        <div class="forecast-grid">
          ${weatherData.forecast
            .slice(0, 4)
            .map(
              (day) => `
            <div class="forecast-item">
              <div class="forecast-date">${day.date}</div>
              <div class="forecast-weather">${day.dayweather}</div>
              <div class="forecast-temp">${day.daytemp}¬∞C / ${day.nighttemp}¬∞C</div>
              <div class="forecast-wind">${day.daywind} ${day.daypower}</div>
            </div>
          `
            )
            .join("")}
        </div>
      </div>
    `;
  }

  return `
    <!DOCTYPE html>
    <html lang="zh-CN">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Â§©Ê∞îÈ¢ÑÊä•</title>
        <style>
            body {
                font-family: 'Microsoft YaHei', 'PingFang SC', Arial, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 600px;
                margin: 0 auto;
                padding: 20px;
                background-color: #f5f7fa;
            }
            .weather-card {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                border-radius: 20px;
                padding: 40px 30px;
                color: white;
                text-align: center;
                margin-bottom: 30px;
                box-shadow: 0 15px 35px rgba(102, 126, 234, 0.3);
                position: relative;
                overflow: hidden;
            }
            .weather-card::before {
                content: '';
                position: absolute;
                top: -50%;
                left: -50%;
                width: 200%;
                height: 200%;
                background: linear-gradient(45deg, transparent, rgba(255,255,255,0.1), transparent);
                transform: rotate(45deg);
                animation: shine 3s infinite;
            }
            @keyframes shine {
                0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
                100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
            }
            .weather-card h1 {
                margin: 0 0 15px 0;
                font-size: 2.8em;
                font-weight: 300;
                position: relative;
                z-index: 1;
            }
            .weather-card .date {
                font-size: 1.2em;
                opacity: 0.9;
                margin-bottom: 25px;
                position: relative;
                z-index: 1;
            }
            .weather-card .location {
                font-size: 1.4em;
                margin-bottom: 25px;
                opacity: 0.95;
                position: relative;
                z-index: 1;
            }
            .temperature-section {
                position: relative;
                z-index: 1;
            }
            .temperature {
                font-size: 4.5em;
                font-weight: 100;
                margin: 25px 0;
                text-shadow: 0 0 20px rgba(255,255,255,0.3);
            }
            .description {
                font-size: 1.6em;
                margin-bottom: 20px;
                font-weight: 300;
            }
            .report-time {
                font-size: 0.9em;
                opacity: 0.8;
                margin-top: 15px;
            }
            .weather-details {
                background: white;
                border-radius: 15px;
                padding: 30px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                margin-bottom: 30px;
            }
            .weather-details h2 {
                color: #667eea;
                margin-top: 0;
                margin-bottom: 25px;
                text-align: center;
                font-size: 1.5em;
            }
            .detail-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
            }
            .detail-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 15px 20px;
                background: linear-gradient(135deg, #f8f9ff 0%, #f0f2ff 100%);
                border-radius: 12px;
                border-left: 5px solid #667eea;
                transition: transform 0.2s ease, box-shadow 0.2s ease;
            }
            .detail-item:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(102, 126, 234, 0.2);
            }
            .detail-label {
                font-weight: 600;
                color: #555;
                font-size: 1.05em;
            }
            .detail-value {
                font-weight: 600;
                color: #333;
                font-size: 1.1em;
            }
            .forecast-section {
                background: white;
                border-radius: 15px;
                padding: 30px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.1);
                margin-bottom: 30px;
            }
            .forecast-section h2 {
                color: #667eea;
                margin-top: 0;
                margin-bottom: 25px;
                text-align: center;
                font-size: 1.5em;
            }
            .forecast-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(130px, 1fr));
                gap: 15px;
            }
            .forecast-item {
                text-align: center;
                padding: 20px 15px;
                background: linear-gradient(135deg, #f8f9ff 0%, #f0f2ff 100%);
                border-radius: 12px;
                border: 2px solid transparent;
                transition: all 0.3s ease;
            }
            .forecast-item:hover {
                border-color: #667eea;
                transform: translateY(-3px);
                box-shadow: 0 8px 25px rgba(102, 126, 234, 0.2);
            }
            .forecast-date {
                font-weight: 600;
                color: #667eea;
                margin-bottom: 8px;
                font-size: 0.95em;
            }
            .forecast-weather {
                font-size: 1.1em;
                margin-bottom: 8px;
                color: #333;
            }
            .forecast-temp {
                font-weight: 600;
                color: #e74c3c;
                margin-bottom: 5px;
                font-size: 1.05em;
            }
            .forecast-wind {
                font-size: 0.9em;
                color: #666;
            }
            .provider-info {
                text-align: center;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border-radius: 15px;
                margin-bottom: 20px;
            }
            .provider-info h3 {
                margin: 0 0 10px 0;
                font-size: 1.3em;
            }
            .provider-info p {
                margin: 5px 0;
                opacity: 0.9;
            }
            .footer {
                text-align: center;
                margin-top: 30px;
                padding: 25px;
                color: #666;
                font-size: 14px;
                background: white;
                border-radius: 15px;
                box-shadow: 0 5px 15px rgba(0,0,0,0.05);
            }
            .footer p {
                margin: 8px 0;
            }
            .emoji {
                font-size: 1.2em;
            }
        </style>
    </head>
    <body>
        <div class="weather-card">
            <h1>üå§Ô∏è Â§©Ê∞îÈ¢ÑÊä•</h1>
            <div class="date">${currentDate}</div>
            <div class="location">üìç ${weatherData.province} ${weatherData.city}</div>
            <div class="temperature-section">
                <div class="temperature">${weatherData.temperature}¬∞C</div>
                <div class="description">${weatherData.weather}</div>
            </div>
            <div class="report-time">Êï∞ÊçÆÊõ¥Êñ∞Êó∂Èó¥: ${weatherData.reportTime}</div>
        </div>
        
        <div class="weather-details">
            <h2>üìä ËØ¶ÁªÜ‰ø°ÊÅØ</h2>
            <div class="detail-grid">
                <div class="detail-item">
                    <span class="detail-label">üå°Ô∏è ÂÆûÊó∂Ê∏©Â∫¶</span>
                    <span class="detail-value">${weatherData.temperatureFloat}¬∞C</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">üíß ÊπøÂ∫¶</span>
                    <span class="detail-value">${weatherData.humidityFloat}%</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">üß≠ È£éÂêë</span>
                    <span class="detail-value">${weatherData.windDirection}</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">üí® È£éÂäõ</span>
                    <span class="detail-value">${weatherData.windPower}</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">üìÆ Ë°åÊîøÁºñÁ†Å</span>
                    <span class="detail-value">${weatherData.adcode}</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">‚òÅÔ∏è Â§©Ê∞îÁä∂ÂÜµ</span>
                    <span class="detail-value">${weatherData.weather}</span>
                </div>
            </div>
        </div>
        
        ${forecastHTML}
        
        <div class="provider-info">
            <h3>üó∫Ô∏è Êï∞ÊçÆÊù•Ê∫ê</h3>
            <p><strong>È´òÂæ∑Âú∞ÂõæÂ§©Ê∞îAPI</strong></p>
            <p>ÂáÜÁ°Æ ¬∑ ÂÆûÊó∂ ¬∑ ÂèØÈù†</p>
        </div>
        
        <div class="footer">
            <p><span class="emoji">ü§ñ</span> Áî± GitHub Actions Ëá™Âä®ÂèëÈÄÅ</p>
            <p><span class="emoji">üì°</span> Êï∞ÊçÆÊù•Ê∫ê: È´òÂæ∑Âú∞ÂõæÂºÄÊîæÂπ≥Âè∞</p>
            <p><span class="emoji">üåà</span> Á•ùÊÇ®Â∫¶ËøáÁæéÂ•ΩÁöÑ‰∏ÄÂ§©ÔºÅ</p>
        </div>
    </body>
    </html>
  `;
}

// ÁîüÊàêOpenWeatherMapÂ§©Ê∞îÈÇÆ‰ª∂HTMLÂÜÖÂÆπ
function generateOpenWeatherEmailHTML(weatherData) {
  const currentDate = new Date().toLocaleDateString("zh-CN", {
    year: "numeric",
    month: "long",
    day: "numeric",
    weekday: "long",
  });

  return `
    <!DOCTYPE html>
    <html lang="zh-CN">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Â§©Ê∞îÈ¢ÑÊä•</title>
        <style>
            body {
                font-family: 'Microsoft YaHei', Arial, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 600px;
                margin: 0 auto;
                padding: 20px;
                background-color: #f5f5f5;
            }
            .weather-card {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                border-radius: 15px;
                padding: 30px;
                color: white;
                text-align: center;
                margin-bottom: 20px;
                box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            }
            .weather-card h1 {
                margin: 0 0 10px 0;
                font-size: 2.5em;
                font-weight: 300;
            }
            .weather-card .date {
                font-size: 1.1em;
                opacity: 0.9;
                margin-bottom: 20px;
            }
            .weather-card .location {
                font-size: 1.3em;
                margin-bottom: 20px;
                opacity: 0.9;
            }
            .temperature {
                font-size: 4em;
                font-weight: 100;
                margin: 20px 0;
            }
            .description {
                font-size: 1.5em;
                margin-bottom: 30px;
                text-transform: capitalize;
            }
            .weather-details {
                background: white;
                border-radius: 10px;
                padding: 20px;
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            }
            .weather-details h2 {
                color: #667eea;
                margin-top: 0;
                margin-bottom: 20px;
                text-align: center;
            }
            .detail-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 15px;
            }
            .detail-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 10px;
                background: #f8f9fa;
                border-radius: 8px;
                border-left: 4px solid #667eea;
            }
            .detail-label {
                font-weight: 600;
                color: #555;
            }
            .detail-value {
                font-weight: 500;
                color: #333;
            }
            .footer {
                text-align: center;
                margin-top: 30px;
                padding: 20px;
                color: #666;
                font-size: 14px;
            }
        </style>
    </head>
    <body>
        <div class="weather-card">
            <h1>‚òÄÔ∏è Â§©Ê∞îÈ¢ÑÊä•</h1>
            <div class="date">${currentDate}</div>
            <div class="location">üìç ${weatherData.city}, ${weatherData.country}</div>
            <div class="temperature">${weatherData.temperature}¬∞C</div>
            <div class="description">${weatherData.description}</div>
        </div>
        
        <div class="weather-details">
            <h2>üìä ËØ¶ÁªÜ‰ø°ÊÅØ</h2>
            <div class="detail-grid">
                <div class="detail-item">
                    <span class="detail-label">üå°Ô∏è ‰ΩìÊÑüÊ∏©Â∫¶</span>
                    <span class="detail-value">${weatherData.feelsLike}¬∞C</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">üíß ÊπøÂ∫¶</span>
                    <span class="detail-value">${weatherData.humidity}%</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">üå™Ô∏è È£éÈÄü</span>
                    <span class="detail-value">${weatherData.windSpeed} m/s</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">üìä Ê∞îÂéã</span>
                    <span class="detail-value">${weatherData.pressure} hPa</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">üëÅÔ∏è ËÉΩËßÅÂ∫¶</span>
                    <span class="detail-value">${weatherData.visibility} km</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">üåÖ Êó•Âá∫</span>
                    <span class="detail-value">${weatherData.sunrise}</span>
                </div>
                <div class="detail-item">
                    <span class="detail-label">üåá Êó•ËêΩ</span>
                    <span class="detail-value">${weatherData.sunset}</span>
                </div>
            </div>
        </div>
        
        <div class="footer">
            <p>ü§ñ Áî± GitHub Actions Ëá™Âä®ÂèëÈÄÅ | Êï∞ÊçÆÊù•Ê∫ê: OpenWeatherMap</p>
            <p>Á•ùÊÇ®Â∫¶ËøáÁæéÂ•ΩÁöÑ‰∏ÄÂ§©ÔºÅ üåà</p>
        </div>
    </body>
    </html>
  `;
}

// Áªü‰∏ÄÁöÑÈÇÆ‰ª∂HTMLÁîüÊàêÊé•Âè£
function generateWeatherEmailHTML(weatherData) {
  if (weatherData.provider === "amap") {
    return generateAmapWeatherEmailHTML(weatherData);
  } else if (weatherData.provider === "openweather") {
    return generateOpenWeatherEmailHTML(weatherData);
  } else {
    throw new Error("‰∏çÊîØÊåÅÁöÑÂ§©Ê∞îÊï∞ÊçÆÊèê‰æõÂïÜ");
  }
}

// ÂèëÈÄÅÈÇÆ‰ª∂
async function sendWeatherEmail(emailList, weatherData) {
  try {
    const transporter = nodemailer.createTransporter(config.smtp);

    const providerName =
      weatherData.provider === "amap" ? "È´òÂæ∑Âú∞Âõæ" : "OpenWeatherMap";
    const cityName =
      weatherData.provider === "amap"
        ? `${weatherData.province}${weatherData.city}`
        : weatherData.city;

    const mailOptions = {
      from: `"Â§©Ê∞îÈÄöÁü•Âä©Êâã" <${config.smtp.auth.user}>`,
      to: emailList.join(", "),
      subject: `üå§Ô∏è ${cityName}Â§©Ê∞îÈ¢ÑÊä• - ${new Date().toLocaleDateString(
        "zh-CN"
      )} (${providerName})`,
      html: generateWeatherEmailHTML(weatherData),
      attachments: [],
    };

    const info = await transporter.sendMail(mailOptions);
    console.log("‚úÖ ÈÇÆ‰ª∂ÂèëÈÄÅÊàêÂäü:", info.messageId);
    console.log("üìß Êî∂‰ª∂‰∫∫ÂàóË°®:", emailList.join(", "));
    console.log("üèôÔ∏è Â§©Ê∞îÂüéÂ∏Ç:", cityName);
    console.log("üå°Ô∏è ÂΩìÂâçÊ∏©Â∫¶:", `${weatherData.temperature}¬∞C`);
    console.log("üìä Êï∞ÊçÆÊèê‰æõÂïÜ:", providerName);

    return info;
  } catch (error) {
    console.error("‚ùå ÂèëÈÄÅÈÇÆ‰ª∂Â§±Ë¥•:", error.message);
    throw error;
  }
}

// È™åËØÅÈÖçÁΩÆ‰ø°ÊÅØ
function validateConfig() {
  const errors = [];

  // È™åËØÅÈÇÆ‰ª∂ÈÖçÁΩÆ
  if (!config.smtp.auth.user || !config.smtp.auth.pass) {
    errors.push("ËØ∑ËÆæÁΩÆ SMTP_USER Âíå SMTP_PASS ÁéØÂ¢ÉÂèòÈáè");
  }

  if (!config.emails) {
    errors.push("ËØ∑ËÆæÁΩÆ RECIPIENT_EMAILS ÁéØÂ¢ÉÂèòÈáè");
  }

  // È™åËØÅÂ§©Ê∞îAPIÈÖçÁΩÆ
  if (config.weather.provider === "amap" && !config.weather.amapApiKey) {
    errors.push("‰ΩøÁî®È´òÂæ∑Âú∞ÂõæAPIÊó∂ÔºåËØ∑ËÆæÁΩÆ AMAP_API_KEY ÁéØÂ¢ÉÂèòÈáè");
  }

  if (
    config.weather.provider === "openweather" &&
    !config.weather.openWeatherApiKey
  ) {
    errors.push(
      "‰ΩøÁî®OpenWeatherMap APIÊó∂ÔºåËØ∑ËÆæÁΩÆ OPENWEATHER_API_KEY ÁéØÂ¢ÉÂèòÈáè"
    );
  }

  if (!["amap", "openweather"].includes(config.weather.provider)) {
    errors.push('WEATHER_PROVIDER ÂøÖÈ°ªËÆæÁΩÆ‰∏∫ "amap" Êàñ "openweather"');
  }

  return errors;
}

// ÊòæÁ§∫ÂüéÂ∏ÇÁºñÁ†Å‰ø°ÊÅØ
function displayCityCodeInfo() {
  console.log("üèôÔ∏è ÊîØÊåÅÁöÑÂüéÂ∏ÇÂèäÁºñÁ†Å:");
  console.log("=====================================");

  const cities = Object.keys(cityCodeMap);
  const chineseCities = cities.filter((city) => /[\u4e00-\u9fa5]/.test(city));
  const englishCities = cities.filter((city) => !/[\u4e00-\u9fa5]/.test(city));

  console.log("üìç ‰∏≠ÊñáÂüéÂ∏ÇÂêç:");
  chineseCities.forEach((city) => {
    console.log(`   ${city}: ${cityCodeMap[city]}`);
  });

  console.log("\nüìç Ëã±ÊñáÂüéÂ∏ÇÂêç:");
  englishCities.forEach((city) => {
    console.log(`   ${city}: ${cityCodeMap[city]}`);
  });

  console.log("\nüí° ‰ΩøÁî®ËØ¥Êòé:");
  console.log("   - ÂèØ‰ª•‰ΩøÁî®ÂüéÂ∏ÇÂêçÁß∞Ôºà‰∏≠ÊñáÊàñËã±ÊñáÔºâ");
  console.log("   - ÂèØ‰ª•Áõ¥Êé•‰ΩøÁî®6‰ΩçÊï∞Â≠óÁöÑÂüéÂ∏ÇÁºñÁ†Å");
  console.log("   - Â¶ÇÊûúÂüéÂ∏Ç‰∏çÂú®ÂàóË°®‰∏≠ÔºåÂ∞ÜÈªòËÆ§‰ΩøÁî®Âåó‰∫¨(110000)");
  console.log("=====================================\n");
}

// ‰∏ªÂáΩÊï∞
async function main() {
  try {
    console.log("üöÄ ÂºÄÂßãÊâßË°åÂ§©Ê∞îÈÄöÁü•‰ªªÂä°...");
    console.log(
      `üì° Êï∞ÊçÆÊèê‰æõÂïÜ: ${
        config.weather.provider === "amap" ? "È´òÂæ∑Âú∞Âõæ" : "OpenWeatherMap"
      }`
    );

    // È™åËØÅÈÖçÁΩÆ
    const configErrors = validateConfig();
    if (configErrors.length > 0) {
      console.error("‚ùå ÈÖçÁΩÆÈ™åËØÅÂ§±Ë¥•:");
      configErrors.forEach((error) => console.error(`   - ${error}`));
      process.exit(1);
    }

    // ÊòæÁ§∫ÂüéÂ∏ÇÁºñÁ†Å‰ø°ÊÅØÔºà‰ªÖÂΩì‰ΩøÁî®È´òÂæ∑Âú∞ÂõæAPIÊó∂Ôºâ
    if (config.weather.provider === "amap") {
      displayCityCodeInfo();
    }

    // Ëß£ÊûêÈÇÆÁÆ±ÂàóË°®
    const emailList = config.emails
      .split(",")
      .map((email) => email.trim())
      .filter((email) => email);

    if (emailList.length === 0) {
      throw new Error("Ê≤°ÊúâÊúâÊïàÁöÑÈÇÆÁÆ±Âú∞ÂùÄ");
    }

    console.log(`üìç Ëé∑Âèñ ${config.weather.city} ÁöÑÂ§©Ê∞î‰ø°ÊÅØ...`);
    const weatherData = await getWeatherData(config.weather.city);

    console.log(`üìß ÂèëÈÄÅÂ§©Ê∞î‰ø°ÊÅØÂà∞ ${emailList.length} ‰∏™ÈÇÆÁÆ±...`);
    await sendWeatherEmail(emailList, weatherData);

    console.log("‚úÖ Â§©Ê∞îÈÄöÁü•‰ªªÂä°ÊâßË°åÊàêÂäüÔºÅ");
    console.log("üéâ ÊâÄÊúâÊî∂‰ª∂‰∫∫ÈÉΩÂ∑≤Êî∂Âà∞ÊúÄÊñ∞ÁöÑÂ§©Ê∞î‰ø°ÊÅØÔºÅ");
  } catch (error) {
    console.error("‚ùå ‰ªªÂä°ÊâßË°åÂ§±Ë¥•:", error.message);

    // Êèê‰æõË∞ÉËØï‰ø°ÊÅØ
    if (error.message.includes("API")) {
      console.error("üí° APIË∞ÉÁî®Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•:");
      console.error("   - APIÂØÜÈí•ÊòØÂê¶Ê≠£Á°Æ");
      console.error("   - ÁΩëÁªúËøûÊé•ÊòØÂê¶Ê≠£Â∏∏");
      console.error("   - APIË∞ÉÁî®Ê¨°Êï∞ÊòØÂê¶Ë∂ÖÈôê");
    }

    if (error.message.includes("SMTP") || error.message.includes("ÈÇÆ‰ª∂")) {
      console.error("üí° ÈÇÆ‰ª∂ÂèëÈÄÅÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•:");
      console.error("   - SMTPÊúçÂä°Âô®ÈÖçÁΩÆÊòØÂê¶Ê≠£Á°Æ");
      console.error("   - ÈÇÆÁÆ±Ë¥¶Âè∑ÂØÜÁ†ÅÊòØÂê¶Ê≠£Á°Æ");
      console.error("   - ÊòØÂê¶ÂºÄÂêØ‰∫ÜÈÇÆÁÆ±ÁöÑSMTPÊúçÂä°");
    }

    process.exit(1);
  }
}

// ÂØºÂá∫Â∑•ÂÖ∑ÂáΩÊï∞Ôºå‰æø‰∫éÊµãËØïÂíåÂÖ∂‰ªñÊ®°Âùó‰ΩøÁî®
module.exports = {
  getWeatherData,
  getAmapWeatherData,
  getOpenWeatherData,
  generateWeatherEmailHTML,
  generateAmapWeatherEmailHTML,
  generateOpenWeatherEmailHTML,
  sendWeatherEmail,
  getCityCode,
  cityCodeMap,
  validateConfig,
  displayCityCodeInfo,
  main,
};

// ÊâßË°å‰∏ªÂáΩÊï∞
if (require.main === module) {
  main();
}
